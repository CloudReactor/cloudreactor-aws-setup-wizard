---
{#
# Copyright 2020 CloudReactor, Inc.
# 
# based on the file vpc-3azs.yaml from cloudonaut.io
#
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#}
AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC: public and private subnets in {{az_count}} availability zone(s), based on a cloudonaut.io template'
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.{{second_octet}}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: '10.{{second_octet}}.0.0/16'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: '10.{{second_octet}}.0.0/16'
  EgressOnlyInternetGateway:
    Type: 'AWS::EC2::EgressOnlyInternetGateway'
    Properties:
      VpcId: !Ref VPC
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  NetworkAclPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInPrivateAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  {% for i in range(0, az_count) %}
  {% set az_letter = ['A', 'B', 'C', 'D'][i] %}
  {% set third_octet_public = i * 32 %}
  {% set third_octet_private = i * 32 + 16 %}
  Subnet{{az_letter}}Public:    
    Type: 'AWS::EC2::Subnet'
    Properties:      
      AvailabilityZone: !Select [{{i}}, !GetAZs '']
      CidrBlock: !Sub '10.{{second_octet}}.{{third_octet_public}}.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: '{{az_letter}} public'
      - Key: Reach
        Value: public
  Subnet{{az_letter}}Private:    
    Type: 'AWS::EC2::Subnet'
    Properties:      
      AvailabilityZone: !Select [{{i}}, !GetAZs '']
      CidrBlock: !Sub '10.{{second_octet}}.{{third_octet_private}}.0/20'      
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: '{{az_letter}} private'
      - Key: Reach
        Value: private
  RouteTable{{az_letter}}Public:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: {{az_letter}} Public
  RouteTable{{az_letter}}Private:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: {{az_letter}} Private
  RouteTableAssociation{{az_letter}}Public:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet{{az_letter}}Public
      RouteTableId: !Ref RouteTable{{az_letter}}Public
  RouteTableAssociation{{az_letter}}Private:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet{{az_letter}}Private
      RouteTableId: !Ref RouteTable{{az_letter}}Private
  RouteTablePublic{{az_letter}}InternetRoute: 
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable{{az_letter}}Public
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  SubnetNetworkAclAssociation{{az_letter}}Public:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet{{az_letter}}Public
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociation{{az_letter}}Private:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet{{az_letter}}Private
      NetworkAclId: !Ref NetworkAclPrivate
  {% endfor %}
  DefaultTaskSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'ECS Tasks with no ingress'
      VpcId: !Ref VPC
Outputs:
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '8.3.1'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  AZs:
    Description: 'AZs'
    Value: {{az_count}}
    Export:
      Name: !Sub '${AWS::StackName}-AZs'      
  {% for i in range(0, az_count) %}
  {% set az_letter = ['A', 'B', 'C', 'D'][i] %}
  AZ{{az_letter}}:
    Description: 'AZ of {{az_letter}}'
    Value: !Select [{{i}}, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZ{{az_letter}}'      
  Subnet{{az_letter}}Public:
    Description: 'Public subnet {{az_letter}}'
    Value: !Ref Subnet{{az_letter}}Public
    Export:
      Name: !Sub '${AWS::StackName}-Subnet{{az_letter}}Public'
  RouteTable{{az_letter}}Public:
    Description: 'Public route table {{az_letter}}'
    Value: !Ref RouteTable{{az_letter}}Public
    Export:
      Name: !Sub '${AWS::StackName}-RouteTable{{az_letter}}Public'
  Subnet{{az_letter}}Private:
    Description: 'Private subnet {{az_letter}}'
    Value: !Ref Subnet{{az_letter}}Private
    Export:
      Name: !Sub '${AWS::StackName}-Subnet{{az_letter}}Private'
  RouteTable{{az_letter}}Private:
    Description: 'Private route table {{az_letter}}'
    Value: !Ref RouteTable{{az_letter}}Private
    Export:
      Name: !Sub '${AWS::StackName}-RouteTable{{az_letter}}Private'
  {% endfor %}
  CidrBlock:
    Description: 'The set of IP addresses for the VPC'
    Value: !GetAtt 'VPC.CidrBlock'
    Export:
      Name: !Sub '${AWS::StackName}-CidrBlock'
  VPC:
    Description: 'VPC'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  SubnetsPublic:
    Description: 'Public subnets'
    Value: !Join [',', [{% for i in range(0, az_count) %}{% set az_letter = ['A', 'B', 'C', 'D'][i] %}!Ref Subnet{{az_letter}}Public{% if not loop.last %}, {% endif %}{% endfor %}]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'
  SubnetsPrivate:
    Description: 'Private subnets'
    Value: !Join [',', [{% for i in range(0, az_count) %}{% set az_letter = ['A', 'B', 'C', 'D'][i] %}!Ref Subnet{{az_letter}}Private{% if not loop.last %}, {% endif %}{% endfor %}]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPrivate'
  RouteTablesPublic:
    Description: 'Public route tables'
    Value: !Join [',', [{% for i in range(0, az_count) %}{% set az_letter = ['A', 'B', 'C', 'D'][i] %}!Ref RouteTable{{az_letter}}Public{% if not loop.last %}, {% endif %}{% endfor %}]]
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablesPublic'
  RouteTablesPrivate:
    Description: 'Private route tables'
    Value: !Join [',', [{% for i in range(0, az_count) %}{% set az_letter = ['A', 'B', 'C', 'D'][i] %}!Ref RouteTable{{az_letter}}Private{% if not loop.last %}, {% endif %}{% endfor %}]]
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablesPrivate'    
  InternetGateway:
    Description: 'Internet gateway'
    Value: !Ref InternetGateway
    Export:
      Name: !Sub '${AWS::StackName}-InternetGateway'
  DefaultTaskSecurityGroup:
    Description: 'Default security group for ECS tasks, with no inbound access'
    Value: !Ref DefaultTaskSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-DefaultTaskSecurityGroup'
